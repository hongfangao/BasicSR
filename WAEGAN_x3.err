2022-12-17 21:11:22,656 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.13.0+cu117
	TorchVision: 0.14.0+cu117
2022-12-17 21:11:22,656 INFO: 
  name: WAEGANtest_duald_x3
  model_type: WAEGANModel
  scale: 3
  num_gpu: 1
  manual_seed: 0
  datasets:[
    train:[
      name: DIV2K
      type: PairedImageDataset
      dataroot_gt: datasets/DIV2K/train/HR/subs
      dataroot_lq: datasets/DIV2K/train/LR/bicubic/X3/subs
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      gt_size: 192
      use_hflip: True
      use_rot: True
      num_worker_per_gpu: 16
      batch_size_per_gpu: 32
      dataset_enlarge_ratio: 100
      prefetch_mode: None
      phase: train
      scale: 3
    ]
    val:[
      name: Set5
      type: PairedImageDataset
      dataroot_gt: datasets/Set5/GTmod12
      dataroot_lq: datasets/Set5/LRbicx3
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 3
    ]
  ]
  network_g:[
    type: WAEGANGenerator
    in_channels: 3
    out_channels: 32
    scale: 3
  ]
  network_d1:[
    type: UNetDiscriminatorSN
    num_in_ch: 192
    num_feat: 64
  ]
  network_d2:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: None
    experiments_root: /data/home/zfyang/home/hfgao/BasicSR/experiments/WAEGANtest_duald_x3
    models: /data/home/zfyang/home/hfgao/BasicSR/experiments/WAEGANtest_duald_x3/models
    training_states: /data/home/zfyang/home/hfgao/BasicSR/experiments/WAEGANtest_duald_x3/training_states
    log: /data/home/zfyang/home/hfgao/BasicSR/experiments/WAEGANtest_duald_x3
    visualization: /data/home/zfyang/home/hfgao/BasicSR/experiments/WAEGANtest_duald_x3/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d1:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d2:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [200000, 400000, 600000, 800000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 1.0
    ]
    ganall_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 1.0
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 3
        test_y_channel: True
      ]
      ssim:[
        type: calculate_ssim
        crop_border: 3
        test_y_channel: True
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: False
  is_train: True
  root_path: /data/home/zfyang/home/hfgao/BasicSR

2022-12-17 21:11:39,152 INFO: Dataset [PairedImageDataset] - DIV2K is built.
2022-12-17 21:11:39,153 INFO: Training statistics:
	Number of train images: 32592
	Dataset enlarge ratio: 100
	Batch size per gpu: 32
	World size (gpu number): 1
	Require iter number per epoch: 101850
	Total epochs: 10; iters: 1000000.
2022-12-17 21:11:39,168 INFO: Dataset [PairedImageDataset] - Set5 is built.
2022-12-17 21:11:39,168 INFO: Number of val images/folders in Set5: 5
2022-12-17 21:11:39,528 INFO: Network [WAEGANGenerator] is created.
2022-12-17 21:11:44,157 INFO: Network: WAEGANGenerator, with parameters: 26,055,203
2022-12-17 21:11:44,157 INFO: WAEGANGenerator(
  (encoder): Encoder(
    (body): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=32, out_features=2, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=2, out_features=32, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=32, out_features=2, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=2, out_features=32, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=32, out_features=2, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=2, out_features=32, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=32, out_features=2, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=2, out_features=32, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=64, out_features=32, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=64, out_features=32, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=64, out_features=32, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=64, out_features=4, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=4, out_features=64, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=64, out_features=4, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=4, out_features=64, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=64, out_features=4, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=4, out_features=64, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=64, out_features=4, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=4, out_features=64, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=128, out_features=64, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=128, out_features=64, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=128, out_features=64, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (4): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (5): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=96, out_features=6, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=6, out_features=96, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=96, out_features=6, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=6, out_features=96, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=96, out_features=6, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=6, out_features=96, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=96, out_features=6, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=6, out_features=96, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=192, out_features=96, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=192, out_features=96, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=192, out_features=96, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (6): Conv2d(96, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=128, out_features=8, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=8, out_features=128, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=128, out_features=8, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=8, out_features=128, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=128, out_features=8, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=8, out_features=128, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=128, out_features=8, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=8, out_features=128, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=256, out_features=128, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=256, out_features=128, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=256, out_features=128, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (8): Conv2d(128, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=160, out_features=10, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=10, out_features=160, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=160, out_features=10, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=10, out_features=160, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=160, out_features=10, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=10, out_features=160, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=160, out_features=10, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=10, out_features=160, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=320, out_features=160, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=320, out_features=160, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=320, out_features=160, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (10): Conv2d(160, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (11): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (12): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (13): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
      (14): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (15): TreeResidualEncoder(
        (dilated_models): ModuleList(
          (0): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (1): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (2): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
          (3): DilatedResidualConv(
            (body): Sequential(
              (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (1): GELU(approximate='none')
              (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
              (3): SELayer(
                (avg_pool): AdaptiveAvgPool2d(output_size=1)
                (fc): Sequential(
                  (0): Linear(in_features=192, out_features=12, bias=False)
                  (1): GELU(approximate='none')
                  (2): Linear(in_features=12, out_features=192, bias=False)
                  (3): Sigmoid()
                )
              )
            )
          )
        )
        (fuse12): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse34): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
        (fuse): FuseBlock(
          (body): Sequential(
            (0): Linear(in_features=384, out_features=192, bias=True)
            (1): GELU(approximate='none')
          )
        )
      )
    )
  )
  (decoder): Sequential(
    (0): Decoder(
      (body): Sequential(
        (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=384, out_features=192, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=384, out_features=192, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=384, out_features=192, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
        (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=192, out_features=12, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=12, out_features=192, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=384, out_features=192, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=384, out_features=192, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=384, out_features=192, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
        (4): Conv2d(192, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (5): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=160, out_features=10, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=10, out_features=160, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=160, out_features=10, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=10, out_features=160, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=160, out_features=10, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=10, out_features=160, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=160, out_features=10, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=10, out_features=160, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=320, out_features=160, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=320, out_features=160, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=320, out_features=160, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
        (6): Conv2d(160, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=128, out_features=8, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=8, out_features=128, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=128, out_features=8, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=8, out_features=128, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=128, out_features=8, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=8, out_features=128, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=128, out_features=8, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=8, out_features=128, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=256, out_features=128, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=256, out_features=128, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=256, out_features=128, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
        (8): Conv2d(128, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (9): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=96, out_features=6, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=6, out_features=96, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=96, out_features=6, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=6, out_features=96, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=96, out_features=6, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=6, out_features=96, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=96, out_features=6, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=6, out_features=96, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=192, out_features=96, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=192, out_features=96, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=192, out_features=96, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
        (10): Conv2d(96, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (11): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=64, out_features=4, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=4, out_features=64, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=64, out_features=4, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=4, out_features=64, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=64, out_features=4, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=4, out_features=64, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=64, out_features=4, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=4, out_features=64, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=128, out_features=64, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=128, out_features=64, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=128, out_features=64, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
        (12): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (13): TreeResidualEncoder(
          (dilated_models): ModuleList(
            (0): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (1): GELU(approximate='none')
                (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=32, out_features=2, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=2, out_features=32, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (1): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (1): GELU(approximate='none')
                (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=32, out_features=2, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=2, out_features=32, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (2): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (1): GELU(approximate='none')
                (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(3, 3), dilation=(3, 3))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=32, out_features=2, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=2, out_features=32, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
            (3): DilatedResidualConv(
              (body): Sequential(
                (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (1): GELU(approximate='none')
                (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4))
                (3): SELayer(
                  (avg_pool): AdaptiveAvgPool2d(output_size=1)
                  (fc): Sequential(
                    (0): Linear(in_features=32, out_features=2, bias=False)
                    (1): GELU(approximate='none')
                    (2): Linear(in_features=2, out_features=32, bias=False)
                    (3): Sigmoid()
                  )
                )
              )
            )
          )
          (fuse12): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=64, out_features=32, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse34): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=64, out_features=32, bias=True)
              (1): GELU(approximate='none')
            )
          )
          (fuse): FuseBlock(
            (body): Sequential(
              (0): Linear(in_features=64, out_features=32, bias=True)
              (1): GELU(approximate='none')
            )
          )
        )
      )
    )
    (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (2): Upsample(
      (conv1): Conv2d(32, 288, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (3): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
2022-12-17 21:11:44,157 INFO: Use Exponential Moving Average with decay: 0.999
2022-12-17 21:11:44,352 INFO: Network [WAEGANGenerator] is created.
2022-12-17 21:11:44,863 INFO: Network [UNetDiscriminatorSN] is created.
2022-12-17 21:11:44,869 INFO: Network: UNetDiscriminatorSN, with parameters: 4,485,761
2022-12-17 21:11:44,869 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2022-12-17 21:11:44,900 INFO: Network [UNetDiscriminatorSN] is created.
2022-12-17 21:11:44,908 INFO: Network: UNetDiscriminatorSN, with parameters: 4,376,897
2022-12-17 21:11:44,908 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2022-12-17 21:11:44,911 INFO: Loss [L1Loss] is created.
2022-12-17 21:11:44,911 INFO: Loss [GANLoss] is created.
2022-12-17 21:11:44,911 INFO: Loss [GANLoss] is created.
2022-12-17 21:11:44,937 INFO: Model [WAEGANModel] is created.
2022-12-17 21:11:46,023 INFO: Start training from epoch: 0, iter: 0
2022-12-17 21:13:47,853 INFO: [WAEGA..][epoch:  0, iter:     100, lr:(1.000e-04,)] [eta: 10 days, 2:41:17, time (data): 1.218 (0.081)] l_g_pix: 1.2460e-01 l_g_gan: 7.1907e-01 l_d_real: 4.3674e-03 out_d_real: 9.6783e+00 l_d_fake: 9.3546e-03 out_d_fake: -3.2686e+01 l_d_real_img: 7.0641e-01 out_d_real_img: -2.5306e-02 l_d_fake_img: 6.6834e-01 out_d_fake_img: -5.0735e-02 
2022-12-17 21:15:17,421 INFO: [WAEGA..][epoch:  0, iter:     200, lr:(1.000e-04,)] [eta: 10 days, 5:43:41, time (data): 1.057 (0.042)] l_g_pix: 4.5915e-01 l_g_gan: 1.3026e-01 l_d_real: 1.3975e-02 out_d_real: 5.8073e+00 l_d_fake: 4.5422e-01 out_d_fake: -7.9483e+00 l_d_real_img: 3.8161e-01 out_d_real_img: 1.0640e+00 l_d_fake_img: 2.3266e+00 out_d_fake_img: 2.1963e+00 
2022-12-17 21:16:47,202 INFO: [WAEGA..][epoch:  0, iter:     300, lr:(1.000e-04,)] [eta: 10 days, 6:54:12, time (data): 0.898 (0.003)] l_g_pix: 1.1238e-01 l_g_gan: 7.4795e-01 l_d_real: 1.2127e-02 out_d_real: 5.9077e+00 l_d_fake: 3.1390e-02 out_d_fake: -2.4791e+02 l_d_real_img: 7.4452e-01 out_d_real_img: -9.9644e-02 l_d_fake_img: 6.4156e-01 out_d_fake_img: -1.0640e-01 
2022-12-17 21:18:16,904 INFO: [WAEGA..][epoch:  0, iter:     400, lr:(1.000e-04,)] [eta: 10 days, 7:25:33, time (data): 0.897 (0.003)] l_g_pix: 1.1389e-01 l_g_gan: 7.1206e-01 l_d_real: 7.5834e-04 out_d_real: 1.4849e+01 l_d_fake: 1.3792e-04 out_d_fake: -1.2694e+02 l_d_real_img: 7.0254e-01 out_d_real_img: -1.7651e-02 l_d_fake_img: 6.7520e-01 out_d_fake_img: -3.6865e-02 
2022-12-17 21:19:46,597 INFO: [WAEGA..][epoch:  0, iter:     500, lr:(1.000e-04,)] [eta: 10 days, 7:43:29, time (data): 0.897 (0.003)] l_g_pix: 1.0581e-01 l_g_gan: 7.5596e-01 l_d_real: 2.1292e-04 out_d_real: 2.1540e+01 l_d_fake: 9.7716e-05 out_d_fake: -1.1213e+02 l_d_real_img: 6.8967e-01 out_d_real_img: 1.3181e-02 l_d_fake_img: 6.3457e-01 out_d_fake_img: -1.2139e-01 
2022-12-17 21:21:16,247 INFO: [WAEGA..][epoch:  0, iter:     600, lr:(1.000e-04,)] [eta: 10 days, 7:53:45, time (data): 0.897 (0.003)] l_g_pix: 1.8536e-01 l_g_gan: 6.8165e-01 l_d_real: 1.0927e-04 out_d_real: 2.7104e+01 l_d_fake: 1.8891e-01 out_d_fake: -4.2671e+01 l_d_real_img: 5.8434e-01 out_d_real_img: 2.4209e-01 l_d_fake_img: 7.0536e-01 out_d_fake_img: 2.3713e-02 
2022-12-17 21:22:45,991 INFO: [WAEGA..][epoch:  0, iter:     700, lr:(1.000e-04,)] [eta: 10 days, 8:02:54, time (data): 0.897 (0.003)] l_g_pix: 1.2557e-01 l_g_gan: 7.0563e-01 l_d_real: 1.2940e-04 out_d_real: 2.4159e+01 l_d_fake: 2.2819e-05 out_d_fake: -8.5771e+01 l_d_real_img: 5.0161e-01 out_d_real_img: 4.7107e-01 l_d_fake_img: 6.8194e-01 out_d_fake_img: -2.3692e-02 
2022-12-17 21:24:15,749 INFO: [WAEGA..][epoch:  0, iter:     800, lr:(1.000e-04,)] [eta: 10 days, 8:09:42, time (data): 0.897 (0.003)] l_g_pix: 3.0609e-01 l_g_gan: 7.4405e-01 l_d_real: 4.8829e-05 out_d_real: 3.0971e+01 l_d_fake: 9.4708e-06 out_d_fake: -8.0099e+01 l_d_real_img: 7.5262e-01 out_d_real_img: -1.1461e-01 l_d_fake_img: 6.4479e-01 out_d_fake_img: -9.9259e-02 
Traceback (most recent call last):
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/optimizer.py", line 23, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/adam.py", line 234, in step
    adam(params_with_grad,
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/adam.py", line 300, in adam
    func(params,
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/adam.py", line 410, in _single_tensor_adam
    denom = (exp_avg_sq.sqrt() / bias_correction2_sqrt).add_(eps)
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/data/home/zfyang/home/hfgao/BasicSR/basicsr/train.py", line 215, in <module>
    train_pipeline(root_path)
  File "/data/home/zfyang/home/hfgao/BasicSR/basicsr/train.py", line 169, in train_pipeline
    model.optimize_parameters(current_iter)
  File "/data/home/zfyang/home/hfgao/BasicSR/basicsr/models/waegan_model.py", line 137, in optimize_parameters
    self.optimizer_g.step()
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/lr_scheduler.py", line 68, in wrapper
    return wrapped(*args, **kwargs)
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/optimizer.py", line 140, in wrapper
    out = func(*args, **kwargs)
  File "/data/home/zfyang/environment/anaconda3/lib/python3.9/site-packages/torch/optim/optimizer.py", line 23, in _use_grad
    ret = func(self, *args, **kwargs)
KeyboardInterrupt
